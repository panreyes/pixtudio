[[category:variables]]
[[category:predefined]]
[[category:local variables]]
[[category:internal]]

[[Local variables|'''Up to Local Variables''']]

----


== Definition ==
'''INT''' priority = 0

priority is a predefined [[local variable]], holding the priority of the [[process]]; default is 0.

Using this priority, the order of process-execution can be influenced, because processes with a higher priority are executed before processes with a lower priority.

== Example ==
<pre>
import "mod_say"
import "mod_proc"
import "mod_timers"

Process A()
Begin
    priority = 0; // Default
    Loop
        say("[" + timer[0] + "] " + "A");
        frame(100000000); // This is very high because Bennu runs without limiter here
    End
End

Process main()
Private
    int f=0;
Begin
    priority = 1; // Set to higher priority than A
    A();
    Repeat
        f++;
        say("[" + timer[0] + "] " + "Main");
        frame(100000000); // This is very high because Bennu runs without limiter here
    Until(f==5)
OnExit
    let_me_alone();
End
</pre>
Used in example: [[say]](), [[let_me_alone]](), [[timer]], [[priority]], [[frame]]

Possible output:
<pre>
[0] A
[0] Main
[26] Main
[26] A
[50] Main
[50] A
[74] Main
[74] A
[98] Main
[98] A
</pre>

It can be seen here that regardless of priority, <code>A</code> is first executed, because <code>A</code> is called by <code>Main</code>. As soon as <code>A</code> reaches its [[frame]] statement, <code>Main</code> continues until its frame statement and this concludes the first frame. The second frame it is shown that the priority has effect: <code>Main</code> is executed before <code>A</code>.

{{Locals}}